@charset 'utf-8';

$base-font-size: 75px; //design iphone6: 375px * 2 / 10 = 75px; --design
// $base-font-size: 32px; //design iphone3gs: 320px / 10 = 32px
// $base-font-size: 64px; //design iphone4/5: 320px * 2 / 10 = 64px
// $base-font-size: 124.2px; //design iphone6: 414px * 3 / 10 = 124.2px;

@function pxToRem($px) {
	@return  $px / $base-font-size * 1rem;
}

@mixin pxToPx($name,$px) {
	#{$name}: round($px / 2) * 1px;
    [data-dpr="2"] & {
        #{$name}: $px * 1px;
    }
    // for mx3
    [data-dpr="2.5"] & {
        #{$name}: round($px * 2.5 / 2) * 1px; //因为设计稿是2倍稿，所以要除以2
    }
    // for xiaomi note
    [data-dpr="2.75"] & {
        #{$name}: round($px * 2.75 / 2) * 1px;
    }
    [data-dpr="3"] & {
        #{$name}: round($px * 3 / 2 ) * 1px;
    }
    // for sumsang note4
    [data-dpr="4"] & {
        #{$name}: $px * 2px;
    }
}


@mixin bg {
    /* Permalink - use to edit and share this gradient: http://colorzilla.com/gradient-editor/#40c3fc+0,1e82ec+100 */
    background: #40c3fc; /* Old browsers */
    background: -moz-linear-gradient(left,  #40c3fc 0%, #1e82ec 100%); /* FF3.6-15 */
    background: -webkit-linear-gradient(left,  #40c3fc 0%,#1e82ec 100%); /* Chrome10-25,Safari5.1-6 */
    background: linear-gradient(to right,  #40c3fc 0%,#1e82ec 100%); /* W3C, IE10+, FF16+, Chrome26+, Opera12+, Safari7+ */
    filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='#40c3fc', endColorstr='#1e82ec',GradientType=1 ); /* IE6-9 */
}

@mixin _bg ($width, $height, $url) {
    width: pxToRem($width);
    height: pxToRem($height);
    background: url($url) center / 100% 100% no-repeat;
    display: inline-block;
}

@mixin clearfix{
	*zoom: 1;
	&:before,
	&:after{
		content: "";
		display: table;
		line-height: 0;
	}
	&:after{
		clear: both;
	}
}

@mixin ellipsis {
    white-space: nowrap;
    word-wrap: normal;
    overflow: hidden;
    -o-text-overflow: ellipsis; /* Opera 9-10.6 */
    text-overflow: ellipsis;
    display: inline-block;
    *display: inline;
    *zoom: 1;
    vertical-align: top;
    max-width: 100%;
    // _width: 100%;
    text-align: left; /* Chrome 21+ bug */
}


//border 
@mixin border($pos, $color) {
    content: "";
    position: absolute;
    transform-origin: 0 0;
    -webkit-transform-origin: 0 0;
    
    @if $pos=='top'{
        #{$pos}: 0px;
        left: 0px;
        right: 0px;
        border-#{$pos}: 1px solid $color;
        transform: scaleY(.5);
        -webkit-transform: scaleY(.5);
    } @else if $pos=='bottom' {
    	 #{$pos}: 0px;
        left: 0px;
        right: 0px;
        border-#{$pos}: 1px solid $color;
        transform: scaleY(.5);
        -webkit-transform: scaleY(.5);            
    } @else {
    	top: 0px;
        bottom: 0px;
        #{$pos}: 0px;
        border-#{$pos}: 1px solid $color;
        transform: scaleX(.5);
        -webkit-transform: scaleX(.5);
    }
   
}


@mixin size($width, $height) {
    width: pxToRem($width);
    height: pxToRem($height);
}

@mixin ycenter {
    position: absolute;
    top: 50%;
    transform: translateY(-50%);
}

@mixin xcenter {
    position: absolute;
    left: 50%;
    transform: translateX(-50%);
}

@mixin center {
    position: absolute;
    left: 50%;
    top: 50%;
    transform: translate(-50%, -50%);
}

@mixin flex ($x: false, $y: false, $direction: false) {
    display: flex;

    @if $x {
        @if $x == s or $x == start {
            justify-content: flex-start;
        } @else if $x == c or $x == center {
            justify-content: center;
        } @else if $x == e or $x == end {
            justify-content: flex-end;
        } @else if $x == a or $x == around {
            justify-content: space-around;
        } @else if $x == b or $x == between {
            justify-content: space-between;
        } @else { 
            justify-content: $x;
        }
    }

    @if $y {
        @if $y == s or $y == start {
            align-items: flex-start;
        } @else if $y == c or $y == center {
            align-items: center;
        } @else if $y == e or $y == end {
            align-items: flex-end;
        }  @else if  $y == stretch or $y == full or $y == f {
            align-items: stretch;
        }  @else if $y == baseline or $y == base or $y == b or $y == line or $y == l {
            align-items: baseline;
        } @else { 
            align-items: $y;
        }
    }

    @if $direction {
        @if $direction == c or $direction == col {
            flex-direction: column;
        } @else {
            flex-direction: $direction;
        }
    }
}


@mixin line($height, $color, $direction: row) {
    @if $direction == row {
        position: relative;
        height: pxToRem($height);

        &::after {
            @include border(bottom, $color);
            @include ycenter;
            height: pxToRem(1px);
        }
    } @else if $direction == c or $direction == col or $direction == columns {
        position: relative;
        height: pxToRem($height);

        &::after {
            @include border(left, $color);
            width: pxToRem(1px);
        }
    }
}

@mixin triangle ($direction, $size, $color) {
    @include size(0px, 0px);
    @if $direction == left {
        border-top: pxToRem($size) solid transparent;
        border-bottom: pxToRem($size) solid transparent;
        border-right: pxToRem($size) solid $color;
    } @else if $direction == right {
        border-top: pxToRem($size) solid transparent;
        border-bottom: pxToRem($size) solid transparent;
        border-left: pxToRem($size) solid $color;
    } @else if $direction == top {
        border-left: pxToRem($size) solid transparent;
        border-right: pxToRem($size) solid transparent;
        border-bottom: pxToRem($size) solid $color;
    } @else if $direction == bottom {
          border-left: pxToRem($size) solid transparent;
          border-right: pxToRem($size) solid transparent;
          border-top: pxToRem($size) solid $color;
    }
}